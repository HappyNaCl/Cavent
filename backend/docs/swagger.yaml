basePath: /api/v1
definitions:
  dto.TagDTO:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  dto.TagTypeDTO:
    properties:
      id:
        type: string
      name:
        type: string
      tags:
        items:
          $ref: '#/definitions/dto.TagDTO'
        type: array
    type: object
  dto.UserAuthDto:
    properties:
      avatarUrl:
        type: string
      email:
        type: string
      firstTimeLogin:
        type: boolean
      id:
        type: string
      name:
        type: string
      provider:
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  responses.SuccessResponse:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
  description: This is the Cavent backend API documentation.
  title: Cavent API
  version: "1.0"
paths:
  /auth/{provider}:
    get:
      description: A endpoint to login with OAuth
      parameters:
      - description: OAuth provider
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: A endpoint to login with OAuth
      tags:
      - auth
  /auth/{provider}/callback:
    get:
      description: A endpoint to login with OAuth callback
      parameters:
      - description: OAuth provider
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: A endpoint to login with OAuth callback
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Remember Me
        in: formData
        name: rememberMe
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserAuthDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Login with email and password
      tags:
      - auth
  /auth/logout:
    post:
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - auth
  /auth/me:
    get:
      description: Check user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserAuthDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Check user info
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Name
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserAuthDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /tags:
    get:
      consumes:
      - application/json
      description: Get all tags with type
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TagTypeDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all tags with type
      tags:
      - tags
  /user/preference:
    get:
      consumes:
      - application/json
      description: Get user tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TagDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user tags
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user preferences
      parameters:
      - description: User ID
        in: formData
        name: userId
        required: true
        type: string
      - collectionFormat: csv
        description: Preferences
        in: formData
        items:
          type: string
        name: preferences
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user preferences
      tags:
      - user
swagger: "2.0"
